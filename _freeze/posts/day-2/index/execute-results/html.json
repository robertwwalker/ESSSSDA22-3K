{
  "hash": "47a6bfcbbbe0b7b9aea53d624ef6c8dc",
  "result": {
    "markdown": "---\ntitle: \"Day 2: Time Series, Stationarity, and ARIMA Models\"\nauthor: \"Robert W. Walker\"\ndate: \"08/09/2022\"\ncategories: [time series, code, analysis]\nimage: \"image1.png\"\n---\n\n\n## Slides\n\n- [Slides in .pdf format](./slides/slidesDay2.pdf)\n- [A xaringan for presentation](https://rww.science/xaringan/ESSSSDA22-Day2/)\n\n## Simulating ARIMA processes\n\nWe want to simulate data under an ARIMA `(p, d, q)` model.  `arima.sim` wants inputs as a list where the expected length of the `ar` and `ma` vectors that will hold the actual values of the `ar` and `ma` parameters.  Here, I ask for a series that is I(1) with a first-order ar=0.1 and a first-order ma=-0.5.  Let me start by generating it and plotting the time series.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(fpp3)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching packages ──────────────────────────────────────────── fpp3 0.4.0 ──\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n✔ tibble      3.1.8     ✔ tsibble     1.1.1\n✔ dplyr       1.0.9     ✔ tsibbledata 0.4.0\n✔ tidyr       1.2.0     ✔ feasts      0.2.2\n✔ lubridate   1.8.0     ✔ fable       0.3.1\n✔ ggplot2     3.3.6     \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ───────────────────────────────────────────────── fpp3_conflicts ──\n✖ lubridate::date()    masks base::date()\n✖ dplyr::filter()      masks stats::filter()\n✖ tsibble::intersect() masks base::intersect()\n✖ tsibble::interval()  masks lubridate::interval()\n✖ dplyr::lag()         masks stats::lag()\n✖ tsibble::setdiff()   masks base::setdiff()\n✖ tsibble::union()     masks base::union()\n```\n:::\n\n```{.r .cell-code}\nn <- 100\nmy.data <- data.frame(\n  x=arima.sim(n = n, \n              model=list(order = c(1, 1, 1), ar=c(0.7), ma=c(-0.5)), n.start=20), \n  dtime = seq(1,n+1))\nlibrary(magrittr)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'magrittr'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following object is masked from 'package:tidyr':\n\n    extract\n```\n:::\n\n```{.r .cell-code}\nmy.data %<>% as_tsibble(index=dtime) \nmy.data %>% autoplot() + labs(title=\"A (1, 1, 1) Series\", x=\"Time\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nPlot variable not specified, automatically selected `.vars = x`\n```\n:::\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n\nNow I want to display the ACF and PACF in levels.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(patchwork)\n{my.data %>% ACF(x, lag_max=20) %>% \n    autoplot() } + \n  {my.data %>% PACF(x, lag_max=20) %>% \n      autoplot() }\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\nFinally, let me display the ACF and PACF with differenced data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n{my.data %>% ACF(diff(x), lag_max=20) %>% \n    autoplot() } + \n  {my.data %>% PACF(diff(x), lag_max=20) %>% \n      autoplot() }\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n## Nonsense Regressions of I(1) Series\n\n\n\n::: {.cell}\n\n:::\n\n\n\n\n## An Example of Time Series Troubles\n\nLet me do this with a relatively simple regression.  Two variables: \n\n\n$$ y = \\alpha + \\beta x + \\epsilon $$\n\n\nBoth are generated randomly.  Here's a basic plot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- cumsum(rnorm(100))\nx <- cumsum(rnorm(100))\nplot(x=seq(1:100), y=y, type=\"l\", col=\"red\", ylim=c(-15,15))\nlines(x=seq(1:100), y=x, col=\"blue\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nEach time series contains 100 observations.  Because both x and y are random, the slopes should be 0, 95% of the time with 95% confidence because there is no underlying relationship.  In practice, let's look at the distribution of p-values for the probability of no relationship.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nSR <- function(n) {\n  Results <- NULL\n  for(i in 1:n) {\ny <- cumsum(rnorm(100))\nx <- cumsum(rnorm(100))\nResult <- summary(lm(y~x))$coefficients[2,4]\nResults <- append(Result,Results)\n  }\n  Results\n}\n```\n:::\n\n\nI replicate the process of random x and random y 1000 times and show the p-values below.  Because they are random, approximately 95% should be greater than 0.05.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nRes1 <- SR(1000)\nplot(density(Res1), main=\"Distribution of p-values from Trending x\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nIn practice,\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntable(Res1 > 0.05)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nFALSE  TRUE \n  779   221 \n```\n:::\n:::\n\n\nThe above table should show about 950 TRUE and 50 FALSE but because each is trended and they share variation from trend, the actual frequency of rejecting the claim of no relationship is far more common than 5%.\n\n\n## ARIMA Models with Government Popularity\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(fpp3)\nlibrary(haven)\nbr7983 <- read_dta(url(\"https://github.com/robertwwalker/Essex-Data/raw/main/br7983.dta\")) %>% \n  mutate(month = as.character(month)) %>% \n  mutate(month = paste0(\"19\",month, sep=\"\")) %>% \n  mutate(date = yearmonth(month, format=\"%Y%m\"))\nbr7983 <- br7983 %>% as_tsibble(index=date) \nbr7983 %>% autoplot(govpopl) + hrbrthemes::theme_ipsum() + labs(y=\"logged Government Popularity\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## Time Series Features\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbr7983 %>% gg_tsdisplay(govpopl, plot_type = \"partial\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n```\nlibrary(haven)\n# To install TSA, it works in three steps.\n# Link to package\n# https://cran.r-project.org/web/packages/TSA/index.html\n# The archive for the package is:\n# https://cran.r-project.org/src/contrib/Archive/TSA/\n# I grabbed the most recent one.\n# Then I used the RStudio: Tools > Install Packages > From a local archive\n# And installed it.\n# It had dependency chains to fix.\n# Those can be fixed with\n# install.packages(c(\"leaps\", \"locfit\", \"mgcv\"))\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(TSA)\n# Replicating the abrupt permanent in April\narimax(br7983$govpopld, seasonal = list(order = c(0, 0, 1), period = 4), xreg=br7983$flandd)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\narimax(x = br7983$govpopld, seasonal = list(order = c(0, 0, 1), period = 4), \n    xreg = br7983$flandd)\n\nCoefficients:\n        sma1  intercept    xreg\n      0.3430     0.0015  0.0687\ns.e.  0.1347     0.0184  0.0950\n\nsigma^2 estimated as 0.009071:  log likelihood = 43.57,  aic = -81.15\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Replicating the abrupt permanent in May\narimax(br7983$govpopld, seasonal = list(order = c(0, 0, 1), period = 4), xreg=br7983$flanddlag1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\narimax(x = br7983$govpopld, seasonal = list(order = c(0, 0, 1), period = 4), \n    xreg = br7983$flanddlag1)\n\nCoefficients:\n        sma1  intercept    xreg\n      0.2668    -0.0033  0.3124\ns.e.  0.1310     0.0153  0.0842\n\nsigma^2 estimated as 0.007019:  log likelihood = 49.7,  aic = -93.41\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Replicating the gradual permanent April\narimax(br7983$govpopld, seasonal = list(order = c(0, 0, 1), period = 4), xtransf = br7983$flandd, transfer = list(c(1,0)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\narimax(x = br7983$govpopld, seasonal = list(order = c(0, 0, 1), period = 4), \n    xtransf = br7983$flandd, transfer = list(c(1, 0)))\n\nCoefficients:\n        sma1  intercept  T1-AR1  T1-MA0\n      0.3930    -0.0080  0.6479  0.1885\ns.e.  0.1251     0.0185  0.1528  0.0718\n\nsigma^2 estimated as 0.007946:  log likelihood = 46.6,  aic = -85.2\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Replicating the gradual permanent May\n# Does not work; degrees of freedom?\n# arimax(br7983$govpopld, seasonal = list(order = c(0, 0, 1), period = 4), xtransf = br7983$flanddlag1, transfer = list(c(1,0)))\n# Falklands - gradual temporary (pulse decay) effect - May 1982\n# Does not work; degrees of freedom?\n# arimax(br7983$govpopld, seasonal = list(order = c(0, 0, 1), period = 4), xtransf = br7983$flanddlag1, transfer = list(c(1,1)))\n# These are fairly demanding [of the data] models.\narimax(br7983$govpopld, seasonal = list(order = c(0, 0, 1), period = 4), xtransf = br7983$flandd, transfer = list(c(1,0)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\narimax(x = br7983$govpopld, seasonal = list(order = c(0, 0, 1), period = 4), \n    xtransf = br7983$flandd, transfer = list(c(1, 0)))\n\nCoefficients:\n        sma1  intercept  T1-AR1  T1-MA0\n      0.3930    -0.0080  0.6479  0.1885\ns.e.  0.1251     0.0185  0.1528  0.0718\n\nsigma^2 estimated as 0.007946:  log likelihood = 46.6,  aic = -85.2\n```\n:::\n:::\n\n\n### ARIMA\n\nStata covers this [in the following link](https://www.stata.com/features/time-series/ts-arima.pdf).\n\n```\nwpi1 <- read_stata(url(\"http://www.stata-press.com/data/r12/wpi1.dta\"))\nwpi1$date <- yearquarter(wpi1$t, fiscal_start = 1)-40\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(url(\"https://github.com/robertwwalker/Essex-Data/raw/main/wpi1.RData\"))\nwpi1 %>% as_tsibble(index=date) %>% gg_tsdisplay(ln_wpi, plot_type = \"partial\") + labs(title=\"Log WPI\")\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n### Stata\n\n```\narima wpi, arima(1,1,1)\n```\n\n### R\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwpi1 %>% as_tsibble(index=date) %>% \n  model(arima = ARIMA(wpi ~ 1 + pdq(1,1,1) + PDQ(0,0,0))) %>% \n  report()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSeries: wpi \nModel: ARIMA(1,1,1) w/ drift \n\nCoefficients:\n         ar1      ma1  constant\n      0.8742  -0.4120    0.0943\ns.e.  0.0637   0.1221    0.0367\n\nsigma^2 estimated as 0.5388:  log likelihood=-135.35\nAIC=278.7   AICc=279.04   BIC=289.95\n```\n:::\n:::\n\n\nThe help for ARIMA explains the alternative parameterization.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Using stats::arima\narima(diff(wpi1$wpi), order=c(1,0,1), include.mean = TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nCall:\narima(x = diff(wpi1$wpi), order = c(1, 0, 1), include.mean = TRUE)\n\nCoefficients:\n         ar1      ma1  intercept\n      0.8742  -0.4120     0.7499\ns.e.  0.0637   0.1221     0.2921\n\nsigma^2 estimated as 0.5257:  log likelihood = -135.35,  aic = 276.7\n```\n:::\n:::\n\n\n## Seasonal\n\n```\narima D.ln_wpi, ar(1) ma(1 4)\n```\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwpi1 %>% as_tsibble(index=date) %>% \n  model(arima = ARIMA(ln_wpi ~ 1 + pdq(1,1,1) + PDQ(0,0,1))) %>% \n  report()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSeries: ln_wpi \nModel: ARIMA(1,1,1)(0,0,1)[4] w/ drift \n\nCoefficients:\n         ar1      ma1    sma1  constant\n      0.8289  -0.4252  0.2403    0.0019\ns.e.  0.0854   0.1374  0.0959    0.0007\n\nsigma^2 estimated as 0.0001144:  log likelihood=385.27\nAIC=-760.53   AICc=-760.02   BIC=-746.47\n```\n:::\n:::\n\nThere are also bits about seasonal arima -- `sarima` -- and arimax but Stata is fundamentally limited here.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwpi1 %>% as_tsibble(index=date) %>% \n  model(arima = ARIMA(ln_wpi ~ 1 + pdq(1,1,1) + PDQ(0,0,1))) %>% \n  gg_tsresiduals()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\nThat works.",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}